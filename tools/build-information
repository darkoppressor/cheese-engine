#!/bin/bash

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd $DIR

PROJECT_DIRECTORY=$1

NDK_VERSION="29.0.13113456"
OUTPUT=""

add_boost_version () {
	local file="/home/tails/build-server/$1/boost/boost/version.hpp"

	OUTPUT="$OUTPUT$(sed -ne "/^#define BOOST_LIB_VERSION \".*\"$/p" "$file" | sed -e "s/^#define BOOST_LIB_VERSION \"//" | sed -e "s/\"$//" | sed -e "s/_/\./")"
}

add_raknet_version () {
	local file="/home/tails/build-server/$1/raknet/raknet/README.md"

	OUTPUT="$OUTPUT$(sed -ne "/^RakNet/p" "$file" | sed -e "s/^RakNet\s*//" | sed -e "s/\s*$//")"
}

add_sdl2_version () {
	local file="/home/tails/build-server/$1/SDL2/include/SDL_version.h"

	local major=$(sed -ne "/^#define\s*SDL_MAJOR_VERSION.*$/p" "$file" | sed -e "s/^#define\s*SDL_MAJOR_VERSION\s*//")
	local minor=$(sed -ne "/^#define\s*SDL_MINOR_VERSION.*$/p" "$file" | sed -e "s/^#define\s*SDL_MINOR_VERSION\s*//")
	local patch=$(sed -ne "/^#define\s*SDL_PATCHLEVEL.*$/p" "$file" | sed -e "s/^#define\s*SDL_PATCHLEVEL\s*//")

	OUTPUT="$OUTPUT$major.$minor.$patch"
}

add_sdl2_image_version () {
	local file="/home/tails/build-server/$1/SDL2_image/SDL_image.h"

	local major=$(sed -ne "/^#define\s*SDL_IMAGE_MAJOR_VERSION.*$/p" "$file" | sed -e "s/^#define\s*SDL_IMAGE_MAJOR_VERSION\s*//")
	local minor=$(sed -ne "/^#define\s*SDL_IMAGE_MINOR_VERSION.*$/p" "$file" | sed -e "s/^#define\s*SDL_IMAGE_MINOR_VERSION\s*//")
	local patch=$(sed -ne "/^#define\s*SDL_IMAGE_PATCHLEVEL.*$/p" "$file" | sed -e "s/^#define\s*SDL_IMAGE_PATCHLEVEL\s*//")

	OUTPUT="$OUTPUT$major.$minor.$patch"
}

add_sdl2_mixer_version () {
	local file="/home/tails/build-server/$1/SDL2_mixer/include/SDL_mixer.h"

	local major=$(sed -ne "/^#define\s*SDL_MIXER_MAJOR_VERSION.*$/p" "$file" | sed -e "s/^#define\s*SDL_MIXER_MAJOR_VERSION\s*//")
	local minor=$(sed -ne "/^#define\s*SDL_MIXER_MINOR_VERSION.*$/p" "$file" | sed -e "s/^#define\s*SDL_MIXER_MINOR_VERSION\s*//")
	local patch=$(sed -ne "/^#define\s*SDL_MIXER_PATCHLEVEL.*$/p" "$file" | sed -e "s/^#define\s*SDL_MIXER_PATCHLEVEL\s*//")

	OUTPUT="$OUTPUT$major.$minor.$patch"
}

add_zlib_version () {
	local file="/home/tails/build-server/$1/zlib/zlib.h"

	if [[ "$1" == "android" ]]; then
		file="/home/tails/build-server/$1/SDL2_image/external/zlib/zlib.h"
	fi

	OUTPUT="$OUTPUT$(sed -ne "/^#define\s*ZLIB_VERSION/p" "$file" | sed -e "s/^#define\s*ZLIB_VERSION\s*\"//" | sed -e "s/\"\s*$//")"
}

add_minizip_version () {
	local file="/home/tails/build-server/$1/zlib/contrib/minizip/minizip.c"

	OUTPUT="$OUTPUT$(sed -ne "/^\s*Version/p" "$file" | sed -e "s/^\s*Version\s*//" | sed -e "s/,.*$//")"
}

if [ -n "$PROJECT_DIRECTORY" ]; then
	OUTPUT="Library\t\tLinux\t\tWindows\t\tmacOS\t\tAndroid\n"
	OUTPUT="$OUTPUT---------------------------------------------------------\n"

	OUTPUT="${OUTPUT}boost\t\t"
	add_boost_version "linux-x86_64"
	OUTPUT="${OUTPUT}\t\t"
	add_boost_version "windows-x86_64"
	OUTPUT="${OUTPUT}\t\t"
	add_boost_version "macos-arm64"
	OUTPUT="${OUTPUT}\t\t"
	add_boost_version "linux-x86_64"
	OUTPUT="${OUTPUT}\n"

	OUTPUT="${OUTPUT}raknet\t\t"
	add_raknet_version "linux-x86_64"
	OUTPUT="${OUTPUT}\t\t"
	add_raknet_version "windows-x86_64"
	OUTPUT="${OUTPUT}\t\t"
	add_raknet_version "macos-arm64"
	OUTPUT="${OUTPUT}\t\t"
	add_raknet_version "android"
	OUTPUT="${OUTPUT}\n"

	OUTPUT="${OUTPUT}SDL2\t\t"
	add_sdl2_version "linux-x86_64"
	OUTPUT="${OUTPUT}\t\t"
	add_sdl2_version "windows-x86_64"
	OUTPUT="${OUTPUT}\t\t"
	add_sdl2_version "macos-arm64"
	OUTPUT="${OUTPUT}\t\t"
	add_sdl2_version "android"
	OUTPUT="${OUTPUT}\n"

	OUTPUT="${OUTPUT}SDL2_image\t"
	add_sdl2_image_version "linux-x86_64"
	OUTPUT="${OUTPUT}\t\t"
	add_sdl2_image_version "windows-x86_64"
	OUTPUT="${OUTPUT}\t\t"
	add_sdl2_image_version "macos-arm64"
	OUTPUT="${OUTPUT}\t\t"
	add_sdl2_image_version "android"
	OUTPUT="${OUTPUT}\n"

	OUTPUT="${OUTPUT}SDL2_mixer\t"
	add_sdl2_mixer_version "linux-x86_64"
	OUTPUT="${OUTPUT}\t\t"
	add_sdl2_mixer_version "windows-x86_64"
	OUTPUT="${OUTPUT}\t\t"
	add_sdl2_mixer_version "macos-arm64"
	OUTPUT="${OUTPUT}\t\t"
	add_sdl2_mixer_version "android"
	OUTPUT="${OUTPUT}\n"

	OUTPUT="${OUTPUT}zlib\t\t"
	add_zlib_version "linux-x86_64"
	OUTPUT="${OUTPUT}\t\t"
	add_zlib_version "windows-x86_64"
	OUTPUT="${OUTPUT}\t\t"
	add_zlib_version "macos-arm64"
	OUTPUT="${OUTPUT}\t\t"
	add_zlib_version "android"
	OUTPUT="${OUTPUT}\n"

	OUTPUT="${OUTPUT}minizip\t\t"
	add_minizip_version "linux-x86_64"
	OUTPUT="${OUTPUT}\t\t\t"
	add_minizip_version "windows-x86_64"
	OUTPUT="${OUTPUT}\t\t\t"
	add_minizip_version "macos-arm64"
	OUTPUT="${OUTPUT}\t\t\tN/A\n\n"

	OUTPUT="${OUTPUT}Build System\n"
	OUTPUT="$OUTPUT------------------------------------------------------\n"

	OUTPUT="${OUTPUT}Linux\t\t$(gcc --version | sed -n 1p), $(ldd --version | sed -n 1p)\n"
	OUTPUT="${OUTPUT}Windows\t\t$(x86_64-w64-mingw32-gcc --version | sed -n 1p)\n"
	macOS_SDK=""
	for f in /home/tails/build-server/macos-arm64/osxcross/tarballs/* ; do
		if [[ $f =~ ^\/home\/tails\/build-server\/macos-arm64\/osxcross\/tarballs\/MacOSX ]]; then
			PREFIX=/home/tails/build-server/macos-arm64/osxcross/tarballs/MacOSX
			SUFFIX=.sdk.tar.xz
			WNAME=${f#$PREFIX}
			WNAME=${WNAME%$SUFFIX}

			macOS_SDK=${WNAME}

			break
		fi
	done
	OUTPUT="${OUTPUT}macOS\t\t$(/home/tails/build-server/macos-arm64/osxcross/target/bin/arm64-apple-darwin24-clang --version | sed -n 1p), macOS SDK $macOS_SDK\n"
	if [ ! -d "/home/tails/build-server/android/android-sdk/ndk/$NDK_VERSION" ]; then
		NDK_VERSION=""
	fi
	sdk_tools=$(sed -ne "/^Pkg.Revision=/p" "/home/tails/build-server/android/android-sdk/tools/source.properties" | sed -e "s/^Pkg.Revision=//")
	sdk_platform_tools=$(sed -ne "/^Pkg.Revision=/p" "/home/tails/build-server/android/android-sdk/platform-tools/source.properties" | sed -e "s/^Pkg.Revision=//")
	sdk_build_tools=""
	for d in /home/tails/build-server/android/android-sdk/build-tools/*/ ; do
		if [ -d "$d" ]; then
			prefix=/home/tails/build-server/android/android-sdk/build-tools/
			suffix=/
			dir_name=${d#$prefix}
			dir_name=${dir_name%$suffix}

			sdk_build_tools=$dir_name

			break
		fi
	done
	OUTPUT="${OUTPUT}Android\t\t$(java -version 2>&1 | sed -n 1p), NDK $NDK_VERSION, SDK Tools $sdk_tools, SDK Platform Tools $sdk_platform_tools, SDK Build Tools $sdk_build_tools\n"

	file="/home/tails/build-server/steamworks-sdk/Readme.txt"
	OUTPUT="${OUTPUT}Steam\t\t$(sed -ne "0,/^v/p" "$file" | tail -n 1)"

	echo -e "$OUTPUT" > "$PROJECT_DIRECTORY/docs/buildInformation.md"
else
	echo "build-information - write the build information for a Cheese Engine project based on the current environment"
	echo "Usage: build-information PROJECT-DIRECTORY"
fi
