#!/bin/bash

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
cd $DIR

PROJECT_PATH=$1
SUPPRESS_EMAIL=$2

CHECKSUM=""

LOG_FILE=""
LOG_FILE_FALLBACK="./log-build-system"

BUILD_HOME="/home/tails"

read_option () {
	IFS='=' read -ra LINE_PARTS <<< "$1"

	if [ ${#LINE_PARTS[@]} -ge 2 ]; then
		echo "${LINE_PARTS[1]}"
	else
		echo ""
	fi
}

if [ -z "$PROJECT_PATH" ]; then
	echo "build - build a Cheese Engine project" | tee -a ${LOG_FILE_FALLBACK}
	echo "Usage: build PROJECT-DIRECTORY [SUPPRESS-EMAIL]" | tee -a ${LOG_FILE_FALLBACK}
	echo "PROJECT-DIRECTORY may be located anywhere except under '~/build-server/projects/'" | tee -a ${LOG_FILE_FALLBACK}
	echo "SUPPRESS-EMAIL is optional and can be true or false (defaults to false)" | tee -a ${LOG_FILE_FALLBACK}
	echo "Do 'build clean' to empty the projects directory" | tee -a ${LOG_FILE_FALLBACK}

	exit
fi

if [ "${PROJECT_PATH}" == "clean" ]; then
	rm -rf $BUILD_HOME/build-server/projects

	mkdir -p $BUILD_HOME/build-server/projects

	echo "Emptying the projects directory" | tee -a ${LOG_FILE_FALLBACK}

	exit
fi

if [[ "$(readlink -f ${PROJECT_PATH})" == $BUILD_HOME/build-server/projects* ]]; then
	echo "PROJECT-DIRECTORY must be outside of '~/build-server/projects/'" | tee -a ${LOG_FILE_FALLBACK}

	exit 64
fi

SUCCESS="false"

PROJECT_NAME="$(basename ${PROJECT_PATH})"

if [ -f "$PROJECT_PATH/CMakeLists.txt" ]; then
	PROJECT_NAME=$(sed -ne "/^.*project[(].*[)].*$/p" "$PROJECT_PATH/CMakeLists.txt" | sed -e "s/^.*project[(]//" | sed -e "s/[)].*$//")
fi

NAME="${PROJECT_NAME}"

VERSION="10"

RESULT=""

chmod +x $BUILD_HOME/build-server/cheese-engine/tools/*
chmod +x $BUILD_HOME/build-server/cheese-engine/tools/build-system/scripts/*
chmod -x $BUILD_HOME/build-server/cheese-engine/tools/build-system/scripts/*-x86_64
chmod -x $BUILD_HOME/build-server/cheese-engine/tools/build-system/scripts/*.cmake
chmod +x $BUILD_HOME/build-server/cheese-engine/tools/build-system/scripts/android/*
chmod +x $BUILD_HOME/build-server/cheese-engine/tools/build-system/scripts/data/*

mkdir -p $BUILD_HOME/build-server/projects

if [ -f "${PROJECT_PATH}/development/build-system-version" ]; then
	compatible="false"

	while read line
	do
		if [ "$line" == "${VERSION}" ]; then
			compatible="true"
		fi
	done <"${PROJECT_PATH}/development/build-system-version"

	if [ "$compatible" == "true" ]; then
		rm -rf "$BUILD_HOME/build-server/projects/${PROJECT_NAME}"

		cp -r "${PROJECT_PATH}" "$BUILD_HOME/build-server/projects/$PROJECT_NAME"

		LOG_FILE="$BUILD_HOME/build-server/projects/${PROJECT_NAME}/log-build-system"

		NAME_CAPPED=""

		CAPS="true"
		for (( i=0; i<${#PROJECT_NAME}; i++ )); do
			LETTER=${PROJECT_NAME:$i:1}

			if [ "${CAPS}" == "true" ]; then
				CAPS="false"
				NAME_CAPPED=${NAME_CAPPED}${LETTER^}
			else
				NAME_CAPPED=${NAME_CAPPED}${LETTER}
			fi

			if [ "${LETTER}" == "-" ]; then
				CAPS="true"
			fi
		done

		log="Initiating Cheesy Build System (version ${VERSION})"
		echo "${log}" | tee -a ${LOG_FILE}
		echo "" | tee -a ${LOG_FILE}
		RESULT="${RESULT}${log}\n\n"
		log="$(date '+%A, %B %d, %Y')"
		echo "${log}" | tee -a ${LOG_FILE}
		RESULT="${RESULT}${log}\n"
		log="$(date '+%H:%M:%S') $(date '+%Z (%z)')"
		echo "${log}" | tee -a ${LOG_FILE}
		echo "" | tee -a ${LOG_FILE}
		RESULT="${RESULT}${log}\n\n"

		log="Loading build system options for ${PROJECT_NAME}"
		echo "${log}" | tee -a ${LOG_FILE}
		echo "" | tee -a ${LOG_FILE}
		RESULT="${RESULT}${log}\n\n"

		OPTION_REBUILD_IMAGES="true"
		OPTION_REBUILD_MUSIC="true"
		OPTION_REBUILD_SOUNDS="true"
		OPTION_GOOGLE_PLAY_SERVICE_ACCOUNT=""
		OPTION_ANDROID_PACKAGE_NAME=""

		if [ -f "${PROJECT_PATH}/development/build-system-options" ]; then
			while read line
			do
				if ! [[ $line =~ ^\# ]]; then
					if [[ $line =~ ^rebuild_images ]]; then
						result=$(read_option "$line")

						if [ -n "$result" ]; then
							OPTION_REBUILD_IMAGES="$result"
						fi
					fi

					if [[ $line =~ ^rebuild_music ]]; then
						result=$(read_option "$line")

						if [ -n "$result" ]; then
							OPTION_REBUILD_MUSIC="$result"
						fi
					fi

					if [[ $line =~ ^rebuild_sounds ]]; then
						result=$(read_option "$line")

						if [ -n "$result" ]; then
							OPTION_REBUILD_SOUNDS="$result"
						fi
					fi

					if [[ $line =~ ^google_play_service_account ]]; then
						result=$(read_option "$line")

						if [ -n "$result" ]; then
							OPTION_GOOGLE_PLAY_SERVICE_ACCOUNT="$result"
						fi
					fi

					if [[ $line =~ ^android_package_name ]]; then
						result=$(read_option "$line")

						if [ -n "$result" ]; then
							OPTION_ANDROID_PACKAGE_NAME="$result"
						fi
					fi
				fi
			done <"${PROJECT_PATH}/development/build-system-options"
		fi

		log="Building ${PROJECT_NAME}"
		echo "${log}" | tee -a ${LOG_FILE}
		echo "" | tee -a ${LOG_FILE}
		RESULT="${RESULT}${log}\n\n"

		$BUILD_HOME/build-server/cheese-engine/tools/build-information "$BUILD_HOME/build-server/projects/$PROJECT_NAME"

		if [ "$OPTION_REBUILD_IMAGES" == "true" ]; then
			$BUILD_HOME/build-server/cheese-engine/tools/build-system/scripts/data/clean-images "$BUILD_HOME/build-server/projects/$PROJECT_NAME"
			$BUILD_HOME/build-server/cheese-engine/tools/build-system/scripts/data/build-images "$BUILD_HOME/build-server/projects/$PROJECT_NAME"
		fi

		if [ "$OPTION_REBUILD_MUSIC" == "true" ]; then
			$BUILD_HOME/build-server/cheese-engine/tools/build-system/scripts/data/clean-music "$BUILD_HOME/build-server/projects/$PROJECT_NAME"
			$BUILD_HOME/build-server/cheese-engine/tools/build-system/scripts/data/build-music "$BUILD_HOME/build-server/projects/$PROJECT_NAME"
		fi

		if [ "$OPTION_REBUILD_SOUNDS" == "true" ]; then
			$BUILD_HOME/build-server/cheese-engine/tools/build-system/scripts/data/clean-sounds "$BUILD_HOME/build-server/projects/$PROJECT_NAME"
			$BUILD_HOME/build-server/cheese-engine/tools/build-system/scripts/data/build-sounds "$BUILD_HOME/build-server/projects/$PROJECT_NAME"
		fi

		sed -i 's/local/home/g' "$BUILD_HOME/build-server/projects/${PROJECT_NAME}/save_location.cfg"

		BUILD_LINUX_64="false"
		BUILD_WINDOWS_64="false"
		BUILD_macOS_64="false"
		BUILD_ANDROID="false"
		ANDROID_ABI_TARGETS=""

		if [ -f "$BUILD_HOME/build-server/projects/$PROJECT_NAME/development/build-system-targets" ]; then
			while read line
			do
				if [ "$line" == "Release-Linux-x86_64" ]; then
					BUILD_LINUX_64="true"
				fi
				if [ "$line" == "Release-Windows-x86_64" ]; then
					BUILD_WINDOWS_64="true"
				fi
				if [ "$line" == "Release-macOS-x86_64" ]; then
					BUILD_macOS_64="true"
				fi
				if [[ $line == Android* ]]; then
					BUILD_ANDROID="true"

					ANDROID_ABI_TARGETS=$(echo $line | sed s/Android//)

					sed -i "s/^APP_ABI.*/APP_ABI := $ANDROID_ABI_TARGETS/" "$BUILD_HOME/build-server/projects/${PROJECT_NAME}/development/android/app/jni/Application.mk"
				fi
			done <"$BUILD_HOME/build-server/projects/$PROJECT_NAME/development/build-system-targets"
		else
			echo "'$BUILD_HOME/build-server/projects/$PROJECT_NAME/development/build-system-targets' does not exist" | tee -a ${LOG_FILE}

			exit 65
		fi

		if [ "$BUILD_LINUX_64" == "false" ] && [ "$BUILD_WINDOWS_64" == "false" ] && [ "$BUILD_macOS_64" == "false" ] && [ "$BUILD_ANDROID" == "false" ]; then
			echo "No targets specified for building in '$BUILD_HOME/build-server/projects/$PROJECT_NAME/development/build-system-targets'" | tee -a ${LOG_FILE}

			exit 66
		fi

		if [ "$BUILD_LINUX_64" == "true" ]; then
			log="Build target Release-Linux-x86_64 requested"
			echo "$log" | tee -a $LOG_FILE
			RESULT="$RESULT$log\n\n"
		fi
		if [ "$BUILD_WINDOWS_64" == "true" ]; then
			log="Build target Release-Windows-x86_64 requested"
			echo "$log" | tee -a $LOG_FILE
			RESULT="$RESULT$log\n\n"
		fi
		if [ "$BUILD_macOS_64" == "true" ]; then
			log="Build target Release-macOS-x86_64 requested"
			echo "$log" | tee -a $LOG_FILE
			RESULT="$RESULT$log\n\n"
		fi
		if [ "$BUILD_ANDROID" == "true" ]; then
			log="Build target Release-Android requested targeting ABIs: $ANDROID_ABI_TARGETS"
			echo "$log" | tee -a $LOG_FILE
			RESULT="$RESULT$log\n\n"
		fi

		if [ "$BUILD_LINUX_64" == "true" ]; then
			log="Attempting build of Release-Linux-x86_64"
			echo "$log" | tee -a $LOG_FILE
			RESULT="$RESULT$log\n\n"

			$BUILD_HOME/build-server/cheese-engine/tools/build-system/scripts/build-target "$BUILD_HOME/build-server/projects/${PROJECT_NAME}" Release-Linux-x86_64
		fi
		if [ "$BUILD_WINDOWS_64" == "true" ]; then
			log="Attempting build of Release-Windows-x86_64"
			echo "$log" | tee -a $LOG_FILE
			RESULT="$RESULT$log\n\n"

			$BUILD_HOME/build-server/cheese-engine/tools/build-system/scripts/build-target "$BUILD_HOME/build-server/projects/${PROJECT_NAME}" Release-Windows-x86_64
		fi
		if [ "$BUILD_macOS_64" == "true" ]; then
			log="Attempting build of Release-macOS-x86_64"
			echo "$log" | tee -a $LOG_FILE
			RESULT="$RESULT$log\n\n"

			$BUILD_HOME/build-server/cheese-engine/tools/build-system/scripts/build-target "$BUILD_HOME/build-server/projects/${PROJECT_NAME}" Release-macOS-x86_64
		fi
		if [ "$BUILD_ANDROID" == "true" ]; then
			log="Attempting build of Release-Android targeting ABIs: $ANDROID_ABI_TARGETS"
			echo "$log" | tee -a $LOG_FILE
			RESULT="$RESULT$log\n\n"

			$BUILD_HOME/build-server/cheese-engine/tools/build-system/scripts/build-android "$BUILD_HOME/build-server/projects/${PROJECT_NAME}"
		fi

		PROJECT_VERSION=$(grep -F "versionName" "$BUILD_HOME/build-server/projects/${PROJECT_NAME}/development/android/build.gradle")

		PV_PREFIX="*versionName = '"
		PV_SUFFIX="'*"
		PROJECT_VERSION=${PROJECT_VERSION##$PV_PREFIX}
		PROJECT_VERSION=${PROJECT_VERSION%%$PV_SUFFIX}

		BUILDS_ALL_WORKED="true"

		PACKAGING="$BUILD_HOME/build-server/projects/${PROJECT_NAME}/packaging"
		PACKAGING_LINUX="${PROJECT_NAME}-linux-${PROJECT_VERSION}"
		PACKAGING_LINUX_STEAM="${PROJECT_NAME}-linux-steam-${PROJECT_VERSION}"
		PACKAGING_WINDOWS="${PROJECT_NAME}-windows-${PROJECT_VERSION}"
		PACKAGING_WINDOWS_STEAM="${PROJECT_NAME}-windows-steam-${PROJECT_VERSION}"
		cd "$BUILD_HOME/build-server/projects/${PROJECT_NAME}/development"
		PACKAGING_macOS="$(find -maxdepth 1 -type d -name '*.app'| head -n1)"
		cd $DIR
		macOS_PREFIX="./"
		PACKAGING_macOS="${PACKAGING_macOS##$macOS_PREFIX}"
		PACKAGING_ANDROID="${PROJECT_NAME}-android-${PROJECT_VERSION}"
		BUILDS="$BUILD_HOME/build-server/builds"

		mkdir "${PACKAGING}"
		mkdir "${PACKAGING}/${PACKAGING_LINUX}"
		mkdir "${PACKAGING}/${PACKAGING_WINDOWS}"
		mv "$BUILD_HOME/build-server/projects/${PROJECT_NAME}/development/${PACKAGING_macOS}" "${PACKAGING}"
		mkdir -p "$PACKAGING/$PACKAGING_macOS/Contents/MacOS"
		mkdir -p "$PACKAGING/$PACKAGING_macOS/Contents/Resources"
		mkdir -p "${BUILDS}"

		PACKAGE_LINUX_64="true"
		PACKAGE_WINDOWS_64="true"
		PACKAGE_macOS="true"

		if [ "$BUILD_LINUX_64" == "true" ]; then
			PLATFORM="Linux-x86_64"
			BINARY="${NAME_CAPPED}-${PLATFORM}"
			TARGET="Release-${PLATFORM}"
			if [ -f "$BUILD_HOME/build-server/projects/${PROJECT_NAME}/${BINARY}" ]; then
				chmod +x "$BUILD_HOME/build-server/projects/${PROJECT_NAME}/${BINARY}"
				mv "$BUILD_HOME/build-server/projects/${PROJECT_NAME}/${BINARY}" "${PACKAGING}/${PACKAGING_LINUX}"

				log="Build succeeded for ${TARGET}"
				echo "${log}" | tee -a ${LOG_FILE}
				RESULT="${RESULT}${log}\n\n"
			else
				BUILDS_ALL_WORKED="false"

				PACKAGE_LINUX_64="false"

				error="Build failed for ${TARGET}:\n"
				error="${error}$(<$BUILD_HOME/build-server/projects/${PROJECT_NAME}/log-${TARGET})"
				error="${error}\n\n"

				echo "Build failed for ${TARGET}" | tee -a ${LOG_FILE}

				RESULT="${RESULT}${error}"
			fi
		else
			PACKAGE_LINUX_64="false"
		fi

		if [ "$BUILD_WINDOWS_64" == "true" ]; then
			PLATFORM="Windows-x86_64"
			BINARY="${NAME_CAPPED}-${PLATFORM}.exe"
			TARGET="Release-${PLATFORM}"
			if [ -f "$BUILD_HOME/build-server/projects/${PROJECT_NAME}/${BINARY}" ]; then
				mv "$BUILD_HOME/build-server/projects/${PROJECT_NAME}/${BINARY}" "${PACKAGING}/${PACKAGING_WINDOWS}"

				log="Build succeeded for ${TARGET}"
				echo "${log}" | tee -a ${LOG_FILE}
				RESULT="${RESULT}${log}\n\n"
			else
				BUILDS_ALL_WORKED="false"

				PACKAGE_WINDOWS_64="false"

				error="Build failed for ${TARGET}:\n"
				error="${error}$(<$BUILD_HOME/build-server/projects/${PROJECT_NAME}/log-${TARGET})"
				error="${error}\n\n"

				echo "Build failed for ${TARGET}" | tee -a ${LOG_FILE}

				RESULT="${RESULT}${error}"
			fi
		else
			PACKAGE_WINDOWS_64="false"
		fi

		if [ "$BUILD_macOS_64" == "true" ]; then
			PLATFORM="macOS-x86_64"
			BINARY="${NAME_CAPPED}-${PLATFORM}"
			TARGET="Release-${PLATFORM}"
			if [ -f "$BUILD_HOME/build-server/projects/${PROJECT_NAME}/${BINARY}" ]; then
				mv "$BUILD_HOME/build-server/projects/${PROJECT_NAME}/${BINARY}" "${PACKAGING}/${PACKAGING_macOS}/Contents/MacOS/game"

				log="Build succeeded for ${TARGET}"
				echo "${log}" | tee -a ${LOG_FILE}
				RESULT="${RESULT}${log}\n\n"
			else
				BUILDS_ALL_WORKED="false"

				PACKAGE_macOS="false"

				error="Build failed for ${TARGET}:\n"
				error="${error}$(<$BUILD_HOME/build-server/projects/${PROJECT_NAME}/log-${TARGET})"
				error="${error}\n\n"

				echo "Build failed for ${TARGET}" | tee -a ${LOG_FILE}

				RESULT="${RESULT}${error}"
			fi
		else
			PACKAGE_macOS="false"
		fi

		if [ "$BUILD_ANDROID" == "true" ]; then
			BINARY="app-release.apk"
			BUNDLE="app-release.aab"
			TARGET="Release-Android"
			if [ -f "$BUILD_HOME/build-server/projects/${PROJECT_NAME}/development/android/app/build/outputs/apk/release/${BINARY}" ] && \
				[ -f "$BUILD_HOME/build-server/projects/${PROJECT_NAME}/development/android/app/build/outputs/bundle/release/${BUNDLE}" ]; then
				mv "$BUILD_HOME/build-server/projects/${PROJECT_NAME}/development/android/app/build/outputs/apk/release/${BINARY}" "${BUILDS}/${PACKAGING_ANDROID}.apk"
				mv "$BUILD_HOME/build-server/projects/${PROJECT_NAME}/development/android/app/build/outputs/bundle/release/${BUNDLE}" "${BUILDS}/${PACKAGING_ANDROID}.aab"

				if [ -n "$OPTION_GOOGLE_PLAY_SERVICE_ACCOUNT" ] && [ -n "$OPTION_ANDROID_PACKAGE_NAME" ]; then
					python3 -m venv "$BUILD_HOME/build-server/projects/${PROJECT_NAME}"
					source "$BUILD_HOME/build-server/projects/${PROJECT_NAME}/bin/activate"
					pip3 install --upgrade pip google-auth google-auth-httplib2 google-api-python-client
					python3 "$BUILD_HOME/build-server/cheese-engine/tools/build-system/scripts/android/deploy_to_google_play.py" "$BUILD_HOME/build-server/android/google_play_service_accounts/$OPTION_GOOGLE_PLAY_SERVICE_ACCOUNT" "$OPTION_ANDROID_PACKAGE_NAME" "${BUILDS}/${PACKAGING_ANDROID}.aab"
				fi

				log="Build succeeded for ${TARGET}"
				echo "${log}" | tee -a ${LOG_FILE}
				echo "" | tee -a ${LOG_FILE}
				RESULT="${RESULT}${log}\n\n"
			else
				BUILDS_ALL_WORKED="false"

				error="Build failed for ${TARGET}:\n"
				error="${error}$(<$BUILD_HOME/build-server/projects/${PROJECT_NAME}/log-${TARGET})"
				error="${error}\n\n"

				echo "Build failed for ${TARGET}" | tee -a ${LOG_FILE}
				echo "" | tee -a ${LOG_FILE}

				RESULT="${RESULT}${error}"
			fi
		fi

		CHECKSUM_DIR="$BUILD_HOME/build-server/projects/${PROJECT_NAME}/data"
		CHECKSUM="$($BUILD_HOME/build-server/cheese-engine/tools/Checksum-Linux-x86_64 ${CHECKSUM_DIR} 1)"

		chmod +x "$BUILD_HOME/build-server/projects/${PROJECT_NAME}/${NAME_CAPPED}"
		fromdos "$BUILD_HOME/build-server/projects/${PROJECT_NAME}/${NAME_CAPPED}"

		if [ "$PACKAGE_LINUX_64" == "true" ]; then
			cp -r "$BUILD_HOME/build-server/projects/${PROJECT_NAME}/data" "${PACKAGING}/${PACKAGING_LINUX}"
			cp -r "$BUILD_HOME/build-server/projects/${PROJECT_NAME}/docs" "${PACKAGING}/${PACKAGING_LINUX}"
			cp "$BUILD_HOME/build-server/projects/${PROJECT_NAME}/${NAME_CAPPED}" "${PACKAGING}/${PACKAGING_LINUX}"
			cp "$BUILD_HOME/build-server/projects/${PROJECT_NAME}/save_location.cfg" "${PACKAGING}/${PACKAGING_LINUX}"

			cp "$BUILD_HOME/build-server/steamworks-sdk/redistributable_bin/linux64/libsteam_api.so" "${PACKAGING}/${PACKAGING_LINUX}"

			sed -i -e "s/^\s*steam:.*$/\tsteam:false/g" "${PACKAGING}/${PACKAGING_LINUX}/data/engine"

			cd "${PACKAGING}"

			tar cpzf "${PACKAGING_LINUX}.tar.gz" "${PACKAGING_LINUX}"

			mv "${PACKAGING_LINUX}.tar.gz" "${BUILDS}"

			cd $DIR

			sed -i -e "s/^\s*steam:.*$/\tsteam:true/g" "${PACKAGING}/${PACKAGING_LINUX}/data/engine"

			cd "${PACKAGING}"

			tar cpzf "${PACKAGING_LINUX_STEAM}.tar.gz" "${PACKAGING_LINUX}"

			mv "${PACKAGING_LINUX_STEAM}.tar.gz" "${BUILDS}"
		fi

		if [ "$PACKAGE_WINDOWS_64" == "true" ]; then
			cp -r "$BUILD_HOME/build-server/projects/${PROJECT_NAME}/data" "${PACKAGING}/${PACKAGING_WINDOWS}"
			cp -r "$BUILD_HOME/build-server/projects/${PROJECT_NAME}/docs" "${PACKAGING}/${PACKAGING_WINDOWS}"
			cp "$BUILD_HOME/build-server/projects/${PROJECT_NAME}/save_location.cfg" "${PACKAGING}/${PACKAGING_WINDOWS}"

			cp "$BUILD_HOME/build-server/steamworks-sdk/redistributable_bin/win64/steam_api64.dll" "${PACKAGING}/${PACKAGING_WINDOWS}"

			sed -i -e "s/^\s*steam:.*$/\tsteam:false/g" "${PACKAGING}/${PACKAGING_WINDOWS}/data/engine"

			cd "${PACKAGING}"

			7z a -tzip -mx=9 -mmt=on "${PACKAGING_WINDOWS}.zip" "${PACKAGING_WINDOWS}"

			mv "${PACKAGING_WINDOWS}.zip" "${BUILDS}"

			cd $DIR

			sed -i -e "s/^\s*steam:.*$/\tsteam:true/g" "${PACKAGING}/${PACKAGING_WINDOWS}/data/engine"

			cd "${PACKAGING}"

			7z a -tzip -mx=9 -mmt=on "${PACKAGING_WINDOWS_STEAM}.zip" "${PACKAGING_WINDOWS}"

			mv "${PACKAGING_WINDOWS_STEAM}.zip" "${BUILDS}"
		fi

		if [ "$PACKAGE_macOS" == "true" ]; then
			cp -r "$BUILD_HOME/build-server/projects/${PROJECT_NAME}/data" "${PACKAGING}/${PACKAGING_macOS}/Contents/Resources"
			cp -r "$BUILD_HOME/build-server/projects/${PROJECT_NAME}/docs" "${PACKAGING}/${PACKAGING_macOS}/Contents/Resources"
			cp "$BUILD_HOME/build-server/projects/${PROJECT_NAME}/save_location.cfg" "${PACKAGING}/${PACKAGING_macOS}/Contents/Resources"

			xcf2png "$BUILD_HOME/build-server/projects/${PROJECT_NAME}/development/images/icons/standard.xcf" -o "$BUILD_HOME/build-server/projects/${PROJECT_NAME}/development/images/icons/standard.png"

			png2icns "${PACKAGING}/${PACKAGING_macOS}/Contents/Resources/icon.icns" "$BUILD_HOME/build-server/projects/${PROJECT_NAME}/development/images/icons/standard.png"

			cp "$BUILD_HOME/build-server/steamworks-sdk/redistributable_bin/osx/libsteam_api.dylib" "${PACKAGING}/${PACKAGING_macOS}/Contents/MacOS"

			sed -i -e "s/^\s*steam:.*$/\tsteam:false/g" "${PACKAGING}/${PACKAGING_macOS}/Contents/Resources/data/engine"

			cd "${PACKAGING}"

			7z a -tzip -mx=9 -mmt=on "${PACKAGING_macOS}.zip" "${PACKAGING_macOS}"

			mv "${PACKAGING_macOS}.zip" "${BUILDS}/${PROJECT_NAME}-macos-${PROJECT_VERSION}.zip"

			#DMG="${PROJECT_NAME}-macos-${PROJECT_VERSION}.dmg"

			# When writing this, I didn't figure out what size to make this
			# My guess is that I would need to determine the total size of the .app directory and make
			# it that size.
			#dd if=/dev/zero of="${DMG}" bs=1M count=130

			# Instead do 'hformat -l "LABEL" "${DMG}"' to give the .dmg a label
			# The hformat manpage says that the label can only be 1-27 characters long
			# That seems like a pain, is it true?
			#hformat "${DMG}"

			#mkdir mount_dmg

			#sudo mount -t hfs -o loop "${DMG}" mount_dmg

			#sudo cp -r "${PACKAGING}/${PACKAGING_macOS}" "mount_dmg"

			#sudo umount mount_dmg

			#rm -rf mount_dmg

			#mv "${DMG}" "${BUILDS}"

			cd $DIR

			sed -i -e "s/^\s*steam:.*$/\tsteam:true/g" "${PACKAGING}/${PACKAGING_macOS}/Contents/Resources/data/engine"

			cd "${PACKAGING}"

			7z a -tzip -mx=9 -mmt=on "${PACKAGING_macOS}.zip" "${PACKAGING_macOS}"

			mv "${PACKAGING_macOS}.zip" "${BUILDS}/${PROJECT_NAME}-macos-steam-${PROJECT_VERSION}.zip"
		fi

		if [ "${BUILDS_ALL_WORKED}" == "true" ]; then
			SUCCESS="true"
		fi
	else
		log="Unable to initiate Cheesy Build System:"
		echo "${log}" | tee -a ${LOG_FILE_FALLBACK}
		RESULT="${RESULT}${log}\n"
		log="'${PROJECT_NAME}' is incompatible (version ${VERSION} required)"
		echo "${log}" | tee -a ${LOG_FILE_FALLBACK}
		echo "" | tee -a ${LOG_FILE_FALLBACK}
		RESULT="${RESULT}${log}\n\n"
	fi
else
	if [ -f "${PROJECT_PATH}/development/build-scripts/version" ]; then
		log="Unable to initiate Cheesy Build System:"
		echo "${log}" | tee -a ${LOG_FILE_FALLBACK}
		RESULT="${RESULT}${log}\n"
		log="'${PROJECT_NAME}' appears to be compatible with version 2 (version ${VERSION} required)"
		echo "${log}" | tee -a ${LOG_FILE_FALLBACK}
		echo "" | tee -a ${LOG_FILE_FALLBACK}
		RESULT="${RESULT}${log}\n\n"
	elif [ -f "${PROJECT_PATH}/development/engine-version.txt" ]; then
		log="Unable to initiate Cheesy Build System:"
		echo "${log}" | tee -a ${LOG_FILE_FALLBACK}
		RESULT="${RESULT}${log}\n"
		log="'${PROJECT_NAME}' appears to be compatible with version 1 (version ${VERSION} required)"
		echo "${log}" | tee -a ${LOG_FILE_FALLBACK}
		echo "" | tee -a ${LOG_FILE_FALLBACK}
		RESULT="${RESULT}${log}\n\n"
	else
		NAME=${PROJECT_PATH}

		log="Unable to initiate Cheesy Build System:"
		echo "${log}" | tee -a ${LOG_FILE_FALLBACK}
		RESULT="${RESULT}${log}\n"
		log="The directory '${PROJECT_PATH}' does not contain a valid Cheese Engine project"
		echo "${log}" | tee -a ${LOG_FILE_FALLBACK}
		echo "" | tee -a ${LOG_FILE_FALLBACK}
		RESULT="${RESULT}${log}\n\n"
	fi
fi

SUBJECT="Build failed for '${NAME}'"

if [ "${SUCCESS}" == "true" ]; then
	SUBJECT="Build succeeded for '${NAME}'"

	log="Build completed successfully for '${NAME}'"
else
	log="Build completed unsuccessfully for '${NAME}'"
fi

LOG_FINAL=${LOG_FILE_FALLBACK}
if [ "${#LOG_FILE}" != "0" ]; then
	LOG_FINAL=${LOG_FILE}
fi

echo "${log}" | tee -a ${LOG_FINAL}
echo "" | tee -a ${LOG_FINAL}
RESULT="${RESULT}${log}\n\n"

log="${PROJECT_NAME}/data/ checksum: ${CHECKSUM}"
echo "${log}" | tee -a ${LOG_FINAL}
echo "" | tee -a ${LOG_FINAL}
RESULT="${RESULT}${log}\n\n"

log="$(date '+%A, %B %d, %Y')"
echo "${log}" | tee -a ${LOG_FINAL}
RESULT="${RESULT}${log}\n"
log="$(date '+%H:%M:%S') $(date '+%Z (%z)')"
echo "${log}" | tee -a ${LOG_FINAL}
RESULT="${RESULT}${log}\n"

if [ -n "$SUPPRESS_EMAIL" ] && [ "$SUPPRESS_EMAIL" == "true" ]; then
	log="Skipping results email"
	echo "${log}" | tee -a ${LOG_FINAL}
	RESULT="${RESULT}${log}\n"
else
	$BUILD_HOME/server/sendmail "${SUBJECT}" "${RESULT}"
fi

if [ "${SUCCESS}" == "false" ]; then
	exit 67
else
	exit 0
fi
