/* Copyright (c) Cheese and Bacon Games, LLC. See docs/LICENSE.md for details. */

def buildAsLibrary = project.hasProperty('BUILD_AS_LIBRARY');
def buildAsApplication = !buildAsLibrary

if (buildAsApplication) {
    apply plugin: 'com.android.application'
} else {
    apply plugin: 'com.android.library'
}

android {
    if (buildAsApplication) {
        namespace 'org.cheeseandbacon.APP_NAME'
    }
    buildToolsVersion project.buildToolsVersion
    ndkVersion project.ndkVersion

    defaultConfig {
        if (buildAsApplication) {
            applicationId "org.cheeseandbacon.APP_NAME"
        }

        compileSdkVersion project.targetSdkVersion
        targetSdkVersion project.targetSdkVersion
        minSdkVersion project.minSdkVersion

        versionCode project.versionCode
        versionName project.versionName

        externalNativeBuild {
            ndkBuild {
                arguments project.ndkArguments
                abiFilters 'arm64-v8a', 'x86_64'
            }
        }
    }

    compileOptions {
        sourceCompatibility project.javaVersion
        targetCompatibility project.javaVersion
    }

    dependencies {
        implementation fileTree(include: ['*.jar'], dir: 'libs')

        // Google Play Services
        implementation 'com.google.android.gms:play-services-base:18.5.0'
        implementation 'com.google.android.gms:play-services-auth:21.3.0'
        implementation 'com.google.android.gms:play-services-games:23.2.0'
    }

    lint {
        abortOnError false
        checkReleaseBuilds false
    }

    signingConfigs {
        release {
            keyAlias 'KEY_ALIAS'
            keyPassword "KEY_PASSWORD"
            storeFile file('STORE_FILE')
            storePassword "STORE_PASSWORD"
        }

        debug {
            keyAlias 'KEY_ALIAS'
            keyPassword "KEY_PASSWORD"
            storeFile file('STORE_FILE')
            storePassword "STORE_PASSWORD"
        }
    }

    buildTypes {
        release {
            debuggable false
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            ndk {
                debugSymbolLevel 'none'
            }
        }

        debug {
            debuggable true
            minifyEnabled false
            shrinkResources false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            matchingFallbacks = ['debug']
            signingConfig signingConfigs.debug
            ndk {
                debugSymbolLevel 'full'
            }
        }
    }

    applicationVariants.all { variant ->
        tasks["merge${variant.name.capitalize()}Assets"].dependsOn("externalNativeBuild${variant.name.capitalize()}")
    }

    if (!project.hasProperty('EXCLUDE_NATIVE_LIBS')) {
        sourceSets.main {
            jniLibs.srcDir 'libs'
        }

        externalNativeBuild {
            ndkBuild {
                path 'jni/Android.mk'
            }
        }
    }

    if (buildAsLibrary) {
        libraryVariants.all { variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith(".aar")) {
                    def fileName = "org.libsdl.app.aar";
                    output.outputFile = new File(outputFile.parent, fileName);
                }
            }
        }
    }
}
