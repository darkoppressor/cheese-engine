Can I use the new SDL2 sensor API to replace the current Android sensors?

Can I use the new SDL2 SDL_GameControllerRumble to replace the current rumble implementation?

Enable joining a game in progress

IPv6

Move source files into a sub directory

***
Multithreading:
The game startup process could be partially multithreaded
The game normally sequentially loads all assets while displaying a load screen (as soon as it can)
When done, you are on the menu and input is working
What if I added a special class of assets, whose names are defined in a script
(or maybe placed in one or more subdirectories)
Any listed asset will be skipped over during initial loading
At this point, the game should have a list of all special assets, but they won't be loaded yet
Once initial loading is complete, the main menu is shown per normal
At this point, the game begins loading the special assets MT in the background
The engine would have a boolean that represents whether this secondary loading is done yet or not
Anything that requires any special assets would need to be unavailable until loading is done
When trying to access an asset, if it doesn't exist but is on the special list,
the engine should return a special error explaining this
This would make it easier to catch crashes caused by misusing this feature
What would this ultimately gain? It would be up to the game
My first thought is that you would make your big music files special,
and this would just allow navigating the menus much more quickly rather than waiting on loading
In fact, with music, it would be possible to allow gameplay to begin and just start playing music as soon as it is done loading
Worst case, you couldn't do anything beyond the main menu and its submenus
(except for starting the game), but this still seems like a small gain
It would mainly be useful for something more like the music example above though
Perhaps this could be made more sophisticated, and make each special asset available as soon as it is loaded,
not requiring the entire special asset loading to complete before using some of them
***

Implement speed of sound
A constant should give meters per pixel, to relate equations to the game world
Another constant should give the actual speed of sound in meters/second
"Played" sounds would thus need to be added to a queue and only actually played when the player should hear them, with the delay being calculated based on the distance between the sound and the player using the speed of sound
Only problem here is that this would only work if all materials in the game have the same speed of sound
I think it is fine to just leave this for now
I can expand further if I ever make a game where this distinction in important

Can the sound volume falloff be based on some actual physics thing and made more realistic?

Implement the Doppler Effect
I think this would require something more than SDL2_Mixer for sounds, so I could change the pitch of them to implement this effect

Scroll bar for scrolling buttons and text

Add text colors to buttons, windows, tooltips, and toasts

Write up guidelines for contributors

Write documentation for using the engine, from a non-code standpoint

Dedicated server mode (can be implemented as a headless mode, controlled by a command line argument)

String data/datafiles
These can be referenced in my other data files in some special way
These can also be referenced in code (this should be really simple to do; look at how colors work?)
Engine needs a language option (this will be a user-configurable option) (defaults to english)
String data entries are now children within a language data entry
When retrieving a string, retrieve the string from the currently set language
With this all setup, this might enable my other idea for making error messages a data file thing
I would also need to extend my stuff to use unicode or whatever instead of just ascii

Change to using dynamic linking instead of static

Maybe all those engine interface functions that return pointers to various objects
should each have an "error" object of the corresponding type that they can return
if they can't find the passed thing
Those objects that are created via scripts could even be hardcoded into the engine, maybe
I could even add a dev option that turns on "crash mode",
and instead of returning error objects, the game just returns null pointers like it does currently

All error messages are located in a script
Would need a new 'error log add' function
that takes an error message name and presents the correct message
Needs to handle an invalid error name
Maybe combine log and error messages into one thing, with a need to specify the type of message

Unit testing

Integration testing

Other platforms for the Cheese Engine:
BSDs
iOS

Add SDL2 audio capture support

Add android mic recording support
Add audio comparison code
Could be used in say bit beast for calling your pet by name

A program that runs in the background (service on android, maybe a regular program on other platforms) that knows where save data is for cheese and bacon games' games
Its purpose would be to detect other instances of the program on other devices
Then it could do street pass like stuff
Of course, this would only be worth it if the devices could detect each other and connect automatically...
A program for all cheese and bacon games, free
Has some kind of currency, earned by simple things like steps taken
Will be cross platform, so I'd prefer to come up with something simple to earn currency on desktop platforms too
Knows where cheese and bacon games are saved on the current platform
What if the user has them elsewhere? Maybe an option to specify the location of various games' save data?
When setting up first time, user creates a profile name
User is assigned randomly generated number. Use some actual real life - based seed, better than just time
These together represent user
User can also set some basic info about them self, and a personal message
Through a connection, the program can detect other instances of itself on other devices
Two instances that see each other do a swap
The program keeps track of what IDs it has swapped with in the past x hours and won't swap with the same ID until the time has passed
Both programs must agree to swap for any data to be exchanged
Both programs agree after swapping of all data is done that it was successful
Only after registering a swap success is any of the swap data actually saved
No record will exist of failed/partial swaps
First, profile data is swapped, including name, message, list of saved games (with swapping permitted), etc.
Keeps a list of all swaps and when they occurred (and if possible maybe even where they occurred?)
Each compatible game has a special save file for this, for swap outgoing
Swapping is enabled on a pergame basis
The swap file contains the permission boolean, along with the game specific data, which is simply swapped out all in one big string
Received swap data for a game is stored in a swap incoming file, inside of a <swap> block
If both programs have a game in common, its data is swapped
